---
import config from "virtual:starlight/user-config";
import type { CollectionEntry } from "astro:content";
import Figure from "@components/Figure.astro";
import CallToAction from "@starlight/components/CallToAction.astro";
import { type SidebarEntry, getPrevNextLinks } from "@starlight/utils/navigation";
import { type StarlightDocsEntry } from "@starlight/utils/routing";

interface Props {
  entry: StarlightDocsEntry;
  sidebar: SidebarEntry[];
  hero: CollectionEntry<"docs">["data"]["hero"];
}

const {
  image,
  figure,
  actions,
} = Astro.props.hero ?? {};

const pageLinks = getPrevNextLinks(Astro.props.sidebar, config.pagination, {
  prev: Astro.props.entry.data.prev,
  next: Astro.props.entry.data.next,
});

const title = Astro.props.entry.data.title;
const tagline = Astro.props.entry.data.description;

const resourceLinks = {
  pdf: title + ".pdf",
  slides: title + ".html"
}

const defaultActions = [
  { text: "Previous", link: pageLinks.prev?.href, icon: { type: "icon", name: "left-arrow" } }, 
  { text: "PDF", link:resourceLinks.pdf, icon: { type: "icon", name: "document" } }, 
  { text: "Slides", link: resourceLinks.slides, icon: { type: "icon", name: "external" } }, 
  { text: "Next", link: pageLinks.next?.href, icon: { type: "icon", name: "right-arrow" } }, 
]

---

<div class="hero">
  {
    figure ? (
      <div class="base">
        <Figure image={image}, caption={figure.caption}, credit={figure.credit} />
      </div>

      <div class="flex stack overlay">
        <div class="flex copy">
          <h1 id="_top" data-page-title set:html={title} />
          {tagline && <div class="tagline" set:html={tagline} />}
        </div>
        {
          actions && actions.length > 0 && (
            <div class="flex actions">
              {actions.map(({ text, ...attrs }) => (
                <CallToAction {...attrs} set:html={text} />
              ))}
            </div>
          ) || (
            <div class="flex actions">
              {defaultActions.map(({ text, ...attrs }) => (
                <CallToAction {...attrs} set:html={text} />
              ))}
            </div>
          )
        }
      </div>
    ) : ( 
      <div class="flex stack">
        <div class="flex copy">
          <h1 id="_top" data-page-title set:html={title} />
          {tagline && <div class="tagline" set:html={tagline} />}
        </div>
        {
          actions && actions.length > 0 && (
            <div class="flex actions">
              {actions.map(({ text, ...attrs }) => (
                <CallToAction {...attrs} set:html={text} />
              ))}
            </div>
          ) || (
            <div class="flex actions">
              {defaultActions.map(({ text, ...attrs }) => (
                <CallToAction {...attrs} set:html={text} />
              ))}
            </div>
          )
        }
      </div>
    )
  }
</div>

<style>
  .hero {
    display: grid;
    grid-template: "hero";
    place-items: center;
    place-content: center;
    overflow: hidden;
    border-bottom: 1px solid var(--sl-color-gray-6);
  }

  .hero > :is(.base, .overlay) {
    grid-area: hero;
  }

  .stack {
    flex-direction: column;
  }

  .stack > * {
    margin-inline: auto;
    text-align: left;
  }


  .copy {
    flex-direction: column;
    padding: 0.5rem;
    gap: 0.5rem;
  }

  .copy > * {
    max-width: 50ch;
  }

  .overlay {
    inset: 0;
    width: 100%;
    background-color: var(--sl-color-backdrop-overlay);
    backdrop-filter: blur(10px);
  }

  h1 {
    font-size: clamp(
      var(--sl-text-2xl),
      calc(0.25rem + 5vw),
      var(--sl-text-4xl)
    );
    line-height: var(--sl-line-height-headings);
    font-weight: 600;
    color: var(--sl-color-white);
  }

  .tagline {
    font-size: clamp(
      var(--sl-text-base),
      calc(0.0625rem + 2vw),
      var(--sl-text-lg)
    );
    color: var(--sl-color-gray-2);
  }

  .actions {
    gap: 1rem 2rem;
    flex-wrap: wrap;
  }

  :root[data-theme="light"] .overlay :is(h1, .tagline) {
    color: var(--sl-color-text-invert);
  }

</style>
